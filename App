<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
  <script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
  <title>Nilofer's To-do App in Backbone.js</title>
  
  <!-- ========= -->
  <!--    CSS    -->
  <!-- ========= -->
  <style type="text/css">
    #todoapp {
      text-align: center;
    }
    #todoapp ul {
      list-style-type: none; /* Hides bullet points from todo list */
    }
    #todo-list input.edit {
      display: none; /* Hides input box*/
    }
    #todo-list .editing label {
      display: none; /* Hides label text when .editing*/
    }    
    #todo-list .editing input.edit {
      display: inline; /* Shows input text box when .editing*/
    }    
    table {
      table-layout: fixed;
      text-align: center;
      word-wrap: break-word;
    }
    .work {
      background-color:#00a1f1;
    }
    .personal {
      background-color:#7cbb00;
    }
  </style>  
</head>
<body>
  <!-- ========= -->
  <!-- Your HTML -->
  <!-- ========= -->

  <section id="todoapp">
    <header id="header">
      <h1>ToDo App</h1>
      <h4>Made by Nilofer</h4>
      <h1></h1>
      <input id="new-todo" placeholder="Enter a task!" autofocus>
        <h1></h1>
    </header>
    <section id="main">
      <div class="container">
        <div class="row clearfix">
          <div class="col-md-12 column">
            <table class="table table-bordered table-hover">
              <thead>
                <tr>
                  <th class = "text-center">
                    Personal
                  </th>
                  <th class = "text-center">
                    Work
                  </th>
                  <th class = "text-center">
                    Completed
                  </th>
                  <th class = "text-center">
                    Task
                  </th>
                  <th class = "text-center">
                    Delete
                  </th>
                </tr>
              </thead>
              <tbody id="todo-list">
                  
              </tbody>
            </table>
          </div>
        </div>
      </div>
<!--      <ul id="todo-list"></ul>-->
    </section>
  </section>
 
  <!-- Templates -->
  <script type="text/template" id="item-template">
      <td><input class="toggle1" type="checkbox" <%= personal ? 'checked' : '' %>></td>
      <td><input class="toggle2" type="checkbox" <%= work ? 'checked' : '' %>></td>
      <td><input class="toggle3" type="checkbox" <%= completed ? 'checked' : '' %>></td>    
      <td><label><%- title %></label>
      <input class="edit" value="<%- title %>"></td>
      <td><button class="destroy">Delete</button></td>
  </script>  

  <!-- ========= -->
  <!-- Libraries -->
  <!-- ========= -->
  <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js" type="text/javascript"></script>
  <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js" type="text/javascript"></script>
  <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>
  <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone-localstorage.js/1.0/backbone.localStorage-min.js" type="text/javascript"></script> 

  <!-- =============== -->
  <!-- Javascript code -->
  <!-- =============== -->
  <script type="text/javascript">
    'use strict';

    var app = {}; // create namespace for our app
    
    //--------------
    // Models
    //--------------
    app.Todo = Backbone.Model.extend({
      defaults: {
        title: '',
        personal: false,
        work: false,
        completed: false
      },
      togglePersonal: function(){
        this.save({ personal: !this.get('personal')});
      },
      toggleWork: function(){
        this.save({ work: !this.get('work')});
      },
      toggle: function(){
        this.save({ completed: !this.get('completed')});
      }
    });

    //--------------
    // Collections
    //--------------
    app.TodoList = Backbone.Collection.extend({
      model: app.Todo,
      localStorage: new Store("backbone-todo")
    });

    // instance of the Collection
    app.todoList = new app.TodoList();

    //--------------
    // Views
    //--------------
    
    // renders individual todo items list (li)
    app.TodoView = Backbone.View.extend({
      tagName: 'tr',
      template: _.template($('#item-template').html()),
      render: function(){
        this.$el.html(this.template(this.model.toJSON()));
        this.input = this.$('.edit');
        return this; // enable chained calls
      },
      initialize: function(){
        this.model.on('change', this.render, this);
        this.model.on('destroy', this.remove, this); // remove: Convenience Backbone's function for removing the view from the DOM.
        this.addColors();
      },      
      events: {
        'dblclick label' : 'edit',
        'keypress .edit' : 'updateOnEnter',
        'blur .edit' : 'close',
        'click .toggle3': 'toggleCompleted',
        'click .toggle2': 'toggleWork',
        'click .toggle1': 'togglePersonal',
        'click .destroy': 'destroy'
      },
      edit: function(){
        this.$el.addClass('editing');
        this.input.focus();
      },
      close: function(){
        var value = this.input.val().trim();
        if(value) {
          this.model.save({title: value});
        }
        this.$el.removeClass('editing');
      },
      updateOnEnter: function(e){
        if(e.which == 13){
          this.close();
        }
      },
      toggleCompleted: function(){
        this.model.toggle();
      },
      toggleWork: function(){
        this.model.toggleWork();
        console.log("clicked")
        var value = this.model.get('work');
        if(value==true) {
          this.$el.addClass('work');
          console.log("on")
        }
        else {
          this.$el.removeClass('work');
          console.log("off")
        }
      },
      togglePersonal: function(){
        this.model.togglePersonal();
        console.log("clicked")
        var value = this.model.get('personal');
        if(value==true) {
          this.$el.addClass('personal');
          console.log("on")
        }
        else {
          this.$el.removeClass('personal');
          console.log("off")
        }
      },
      addColors: function(){
        console.log("time to add colors")
        var value = this.model.get('work');
        if(value==true) {
          this.$el.addClass('work');
          console.log("on")
        }
        else {
          this.$el.removeClass('work');
          console.log("off")
        }
        
        var value = this.model.get('personal');
        if(value==true) {
          this.$el.addClass('personal');
          console.log("on")
        }
        else {
          this.$el.removeClass('personal');
          console.log("off")
        }
      },
      destroy: function(){
        this.model.destroy();
      }      
    });

    // renders the full list of todo items calling TodoView for each one.
    app.AppView = Backbone.View.extend({
      el: '#todoapp',
      initialize: function () {
        this.input = this.$('#new-todo');
        app.todoList.on('add', this.addAll, this);
        app.todoList.on('reset', this.addAll, this);
        app.todoList.fetch(); // Loads list from local storage
      },
      events: {
        'keypress #new-todo': 'createTodoOnEnter'
      },
      createTodoOnEnter: function(e){
        if ( e.which !== 13 || !this.input.val().trim() ) { // ENTER_KEY = 13
          return;
        }
        app.todoList.create(this.newAttributes());
        this.input.val(''); // clean input box
      },
      addOne: function(todo){
        var view = new app.TodoView({model: todo});
        $('#todo-list').append(view.render().el);
      },
      addAll: function(){
        this.$('#todo-list').html(''); // clean the todo list
        app.todoList.each(this.addOne, this);
      },
      newAttributes: function(){
        return {
          title: this.input.val().trim(),
          completed: false,
          work: false,
          personal: false
        }
      }
    });

    //--------------
    // Initializers
    //--------------   

    app.appView = new app.AppView(); 

  </script>
  
</body>
</html>
